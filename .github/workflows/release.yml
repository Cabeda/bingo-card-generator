name: Release

on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: read

jobs:
  release:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Get latest tag
        id: get_tag
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "Latest tag: $LATEST_TAG"

      - name: Get commits since last tag
        id: commits
        run: |
          LATEST_TAG="${{ steps.get_tag.outputs.latest_tag }}"
          if [ "$LATEST_TAG" = "v0.0.0" ]; then
            COMMITS=$(git log --pretty=format:"%s" HEAD)
          else
            COMMITS=$(git log --pretty=format:"%s" ${LATEST_TAG}..HEAD)
          fi
          
          echo "Commits since $LATEST_TAG:"
          echo "$COMMITS"
          
          # Save to file for multi-line handling
          echo "$COMMITS" > /tmp/commits.txt

      - name: Determine version bump type
        id: version_bump
        run: |
          COMMITS=$(cat /tmp/commits.txt)
          
          # Check for breaking changes (BREAKING CHANGE: or ! in commit type)
          if echo "$COMMITS" | grep -qE "(BREAKING CHANGE:|^[a-z]+!:)"; then
            echo "bump_type=major" >> $GITHUB_OUTPUT
            echo "Version bump: MAJOR (breaking changes detected)"
          # Check for new features (feat:)
          elif echo "$COMMITS" | grep -qE "^feat(\(.*\))?:"; then
            echo "bump_type=minor" >> $GITHUB_OUTPUT
            echo "Version bump: MINOR (new features detected)"
          # Check for any conventional commits (fix:, docs:, etc.)
          elif echo "$COMMITS" | grep -qE "^(fix|perf|refactor|style|test|build|ci|chore|docs)(\(.*\))?:"; then
            echo "bump_type=patch" >> $GITHUB_OUTPUT
            echo "Version bump: PATCH (fixes or other changes detected)"
          else
            echo "bump_type=none" >> $GITHUB_OUTPUT
            echo "Version bump: NONE (no conventional commits detected)"
          fi

      - name: Bump version with Bun
        id: bump_version
        if: steps.version_bump.outputs.bump_type != 'none'
        run: |
          BUMP_TYPE="${{ steps.version_bump.outputs.bump_type }}"
          echo "Bumping version: $BUMP_TYPE"
          
          # Run bun pm version which will update package.json, create commit and tag
          # According to Bun CLI: https://bun.sh/docs/cli/pm#version
          bun pm version $BUMP_TYPE
          
          # Get the new version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

      - name: Push changes and tags
        if: steps.version_bump.outputs.bump_type != 'none'
        run: |
          git push origin main
          git push origin --tags

      - name: Generate changelog
        id: changelog
        if: steps.version_bump.outputs.bump_type != 'none'
        run: |
          NEW_VERSION="${{ steps.bump_version.outputs.new_version }}"
          LATEST_TAG="${{ steps.get_tag.outputs.latest_tag }}"
          
          echo "Generating changelog from $LATEST_TAG to v$NEW_VERSION"
          
          # Get commits and format them
          if [ "$LATEST_TAG" = "v0.0.0" ]; then
            COMMITS=$(git log --pretty=format:"- %s (%h)" v$NEW_VERSION)
          else
            COMMITS=$(git log --pretty=format:"- %s (%h)" ${LATEST_TAG}..v$NEW_VERSION)
          fi
          
          # Create changelog content
          {
            echo "## What's Changed"
            echo ""
            echo "$COMMITS"
            echo ""
            echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/${LATEST_TAG}...v${NEW_VERSION}"
          } > /tmp/changelog.md
          echo "Changelog generated"

      - name: Create GitHub Release
        if: steps.version_bump.outputs.bump_type != 'none'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const newVersion = '${{ steps.bump_version.outputs.new_version }}';
            const changelog = fs.readFileSync('/tmp/changelog.md', 'utf8');
            
            await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${newVersion}`,
              name: `v${newVersion}`,
              body: changelog,
              draft: false,
              prerelease: false
            });
            
            console.log(`Release v${newVersion} created successfully`);

      - name: No release needed
        if: steps.version_bump.outputs.bump_type == 'none'
        run: |
          echo "No conventional commits found since last release. Skipping version bump."
